name: Checkout | Make envs | Commit away

on:
  workflow_dispatch:
    inputs:
      repo_name:
        description: 'Repo from where to get content'
        required: true
      commit_message:
        description: 'Message of pushed commit'
        required: true
      pat:
        description: 'Account personal access token'
        required: true
      safe_url:
        description: 'Url of @safe'
        required: true

jobs:
  deploy_job:
    runs-on: ubuntu-latest
    container: pandoc/latex
    permissions:
      actions: read

    steps:

    - name: Display input parameters
      run: |
        echo "Repository: ${{ github.event.inputs.repo_name }}"
        echo "Personal Access Token: ${{ github.event.inputs.pat }}"
        echo "commit_message: ${{ github.event.inputs.commit_message }}"
        echo "Safe URL: ${{ github.event.inputs.safe_url }}"

    - name: checkout ${{ github.event.inputs.repo_name }} | ${{ github.event.inputs.commit_message }}
      uses: actions/checkout@v3
      with:
        repository: ${{ github.event.inputs.repo_name }}  # User's repository
        token: ${{ github.event.inputs.pat }}        # PAT for authentication
        # path: user-repo                              # Optional: Custom checkout path

    - name: List files in the repository
      run: ls
      # run: ls source_repo

    - name: Make request to @safe db
      id: safe
      uses: Artanty/http-request-action@main
      with:
        url: 'https://cs99850.tmweb.ru/safe/get'
        method: 'POST'
        customHeaders: '{"Content-Type": "application/json"}'
        data: '{"projectId": "${{ github.event.inputs.repo_name }}@github", "stage": "DEPLOY"}'
        retry: 5
        retryWait: 100
        timeout: 30000
    
    - name: Conditionally create vercel.json
      if: fromJson(steps.safe.outputs.response).data.SERVICE_DOMAIN == 'vercel'
      run: |
        JSON='{
          "version": 2,
          "builds": [
            {
              "src": "app.js",
              "use": "@vercel/node"
            }
          ],
          "routes": [
            {
              "src": "/(.*)",
              "dest": "app.js"
            }
          ],
          "installCommand": "npm install"
        }'
        echo "$JSON" > vercel.json

    - name: Display vercel.json
      if: fromJson(steps.safe.outputs.response).data.SERVICE_DOMAIN == 'vercel'
      run: cat vercel.json
      
    # - name: Check for TARGET_VERCEL_JSON in response
    #   id: check_vercel_json
    #   run: |
    #     JSON="${{ fromJson(steps.safe.outputs.response).data.TARGET_VERCEL_JSON }}"
    #     if [ -n "$JSON" ]; then
    #       echo "vercel_json_present=true" >> $GITHUB_OUTPUT
    #     else
    #       echo "vercel_json_present=false" >> $GITHUB_OUTPUT
    #     fi

    # - name: Create vercel.json file if TARGET_VERCEL_JSON is present
    #   if: steps.check_vercel_json.outputs.vercel_json_present == 'true'
    #   run: |
    #     SOURCE="${{ fromJson(steps.safe.outputs.response).data.TARGET_VERCEL_JSON }}"
    #     JSON='{
    #       "version": 2,
    #       "builds": [
    #         {
    #           "src": "'"$SOURCE"'",
    #           "use": "@vercel/node"
    #         }
    #       ],
    #       "routes": [
    #         {
    #           "src": "/(.*)",
    #           "dest": "'"$SOURCE"'"
    #         }
    #       ],
    #       "installCommand": "npm install"
    #     }'
    #     echo "$JSON" > vercel.json

    # - name: Remove .env from .gitignore
    #   run: |
    #     sed -i '/^\.env$/d' .gitignore
    
    # - name: Use secret as environment variable
    #   env:
    #     SAFE_URL: ${{ secrets.SAFE_URL }}
    #   run: echo "The secret URL is $SAFE_URL"

    # - name: Create .env file
    #   run: |
    #     echo "APP_ID=${{ fromJson(steps.safe.outputs.response).data.APP_ID }}
    #     APP_WEBHOOK_SECRET=${{ fromJson(steps.safe.outputs.response).data.APP_WEBHOOK_SECRET }}
    #     APP_GIT_PAT=${{ fromJson(steps.safe.outputs.response).data.APP_GIT_PAT }}
    #     APP_CLIENT_ID=${{ fromJson(steps.safe.outputs.response).data.APP_CLIENT_ID }}
    #     APP_CLIENT_SECRET=${{ fromJson(steps.safe.outputs.response).data.APP_CLIENT_SECRET }}
    #     APP_PRIVATE_KEY=${{ fromJson(steps.safe.outputs.response).data.APP_PRIVATE_KEY }}" > .env
    #     echo "SAFE_URL=${{ secrets.SAFE_URL }}" >> .env

    # - name: Set environment variables and push to another repository
    #   run: |
    #     echo "TARGET_GIT_TOKEN=${{ fromJson(steps.safe.outputs.response).data.GIT_PAT }}" >> $GITHUB_ENV
    #     echo "TARGET_GIT_USER=${{ fromJson(steps.safe.outputs.response).data.GIT_LOGIN }}" >> $GITHUB_ENV
    #     echo "TARGET_GIT_REPO=${{ fromJson(steps.safe.outputs.response).data.GIT_REPO }}" >> $GITHUB_ENV
    #     echo "TARGET_GIT_EMAIL=${{ fromJson(steps.safe.outputs.response).data.GIT_EMAIL }}" >> $GITHUB_ENV
    
    # - name: Pushes to another repository
    #   uses: cpina/github-action-push-to-another-repository@main
    #   env:
    #     API_TOKEN_GITHUB: ${{ env.TARGET_GIT_TOKEN }}
    #   with:
    #     source-directory: '.'
    #     destination-github-username: ${{ env.TARGET_GIT_USER }}
    #     destination-repository-name: ${{ env.TARGET_GIT_REPO }}
    #     user-email: ${{ env.TARGET_GIT_EMAIL }}
    #     target-branch: main
